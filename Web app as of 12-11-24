import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
import pandas as pd
from polygon import RESTClient
from typing import cast
from urllib3 import HTTPResponse
import json
from datetime import datetime, timedelta
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import statsmodels.api as sm


# Function to fetch stock data and calculate mean return and volatility
def fetch_stock_data(ticker):
    stock = yf.Ticker(ticker)
    hist = stock.history(period="max")
    
    # Calculate daily log returns
    daily_returns = np.log(hist['Close'] / hist['Close'].shift(1)).dropna()
    
    # Mean return and volatility (annualized)
    annual_mean_return = daily_returns.mean() * 252
    annual_volatility = daily_returns.std() * np.sqrt(252)

    # Convert to daily values
    daily_mean_return = annual_mean_return / 252
    daily_volatility = annual_volatility / np.sqrt(252)

    # Last closing price as the starting price
    last_price = hist['Close'][-1]
    
    return daily_mean_return, daily_volatility, last_price

# Monte Carlo simulation function
def monte_carlo_simulation(S0, mean_return, volatility, T, N):
    dt = T / N
    price = np.zeros(N)
    price[0] = S0

    # Simulate stock prices using random walk (Monte Carlo method)
    for i in range(1, N):
        z = np.random.normal(0, 1)
        price[i] = price[i-1] * np.exp((mean_return - 0.5 * volatility**2) * dt + volatility * np.sqrt(dt) * z)
    
    return price

# Streamlit UI
st.title("Welcome to EZvest - the Investing and Forecasting Site")

st.write("""
    None of the information or recommendations you receive from this website should be listened to, 
    you would be a fool to take financial advice solely off the predictions or 
    otherwise given by this website.
""")

# Sidebar for stock and portfolio simulations
st.sidebar.title("Menu")
st.sidebar.title("Capabilities")
Operation_option = st.sidebar.selectbox("Select an option:", ["Stock Return Simulation", "Portfolio Returns Simulation", "Stock Returns Correlation", "Autocorrelation", 
"Linear Regression", "Should you buy...? (DCF)", "Which way? (Random forrest ML algo)"
])

# Stock Return Simulation
if Operation_option == "Stock Return Simulation":
    st.title("Stock Return Simulation")

    # Input: stock ticker and number of days
    ticker = st.text_input("Enter Stock Ticker (e.g., AAPL, MSFT):", "AAPL")
    num_days = st.slider("Select number of days to simulate:", 1, 3000, 365)

    if st.button("Run Stock Simulation"):
        try:
            # Fetch historical data
            mean_return, volatility, last_price = fetch_stock_data(ticker)
            st.write(f"Daily Mean Return: {mean_return}, Daily Volatility: {volatility}, Last Price: {last_price}")
            
            # Run 10000 stock simulations using Monte Carlo method
            simulations = []
            final_returns = []
            for _ in range(10000):
                simulation = monte_carlo_simulation(last_price, mean_return, volatility, num_days, num_days)
                simulations.append(simulation)
                final_return = (simulation[-1] - last_price) / last_price
                final_returns.append(final_return)
            
            # Plot the simulations
            plt.figure(figsize=(10,6))
            for simulation in simulations:
                plt.plot(simulation, lw=0.5)
            plt.title(f"Monte Carlo Simulation for {ticker} over {num_days} days")
            plt.xlabel("Days")
            plt.ylabel("Price")
            plt.grid(True)
            st.pyplot(plt)
            
            # Calculate and display average return and standard deviation
            avg_return = np.mean(final_returns) * 100
            std_dev_return = np.std(final_returns) * 100
            st.write(f"Average Percentage Return: {avg_return:.2f}%")
            st.write(f"Standard Deviation of Returns: {std_dev_return:.2f}%")
        
        except Exception as e:
            st.error(f"An error occurred: {e}")

# Portfolio Returns Simulation
elif Operation_option == "Portfolio Returns Simulation":
    st.header("Portfolio Returns Simulation")
    
    time_horizon = st.slider("Select number of days to simulate:", 1, 1000, 60)
    num_simulations = st.slider("Select number of simulations:", 10, 10000, 100)

    tickers = st.text_area("Enter up to 20 stock tickers separated by commas (e.g., AAPL, MSFT, GOOG):").split(",")
    tickers = [ticker.strip().upper() for ticker in tickers if ticker.strip()]

    investments = []
    if tickers:
        for i, ticker in enumerate(tickers):
            investment = st.number_input(f"Investment in {ticker}:", min_value=0.0, value=1000.0, step=100.0)
            investments.append(investment)
    
    if st.button("Run Portfolio Simulation") and tickers:
        try:
            stock_data_dict = {}
            stats_dict = {}
            starting_balance = sum(investments)

            for i, ticker in enumerate(tickers):
                mean_return, sigma, last_close = fetch_stock_data(ticker)
                stats_dict[ticker] = {
                    'Mean Return': mean_return,
                    'Sigma': sigma,
                    'Last Close': last_close,
                    'Investment': investments[i]
                }

            plt.figure(figsize=(10,6))
            final_portfolio_values = []
            for sim in range(num_simulations):
                portfolio_values = np.zeros(time_horizon)
                for ticker in tickers:
                    S0 = stats_dict[ticker]['Last Close']
                    mu = stats_dict[ticker]['Mean Return']
                    sigma = stats_dict[ticker]['Sigma']
                    investment = stats_dict[ticker]['Investment']
                    n_shares = investment / S0
                    
                    # Simulate using the Monte Carlo method for individual stock
                    simulated_prices = monte_carlo_simulation(S0, mu, sigma, time_horizon, time_horizon)
                    stock_values = simulated_prices * n_shares
                    portfolio_values += stock_values
                
                final_portfolio_values.append(portfolio_values[-1])
                plt.plot(portfolio_values, lw=0.5, alpha=0.3)

            plt.title(f"Portfolio Value Simulation Over {time_horizon} Days ({num_simulations} Simulations)")
            plt.xlabel('Time Steps')
            plt.ylabel('Portfolio Value ($)')
            plt.grid(True)
            st.pyplot(plt)

            avg_final_value = np.mean(final_portfolio_values)
            std_dev_final_value = np.std(final_portfolio_values)

            avg_return = (avg_final_value - starting_balance) / starting_balance * 100
            st.write(f"Average Final Portfolio Value: ${avg_final_value:.2f}")
            st.write(f"Standard Deviation of Final Portfolio Values: ${std_dev_final_value:.2f}")
            st.write(f"Average Portfolio Return: {avg_return:.2f}%")

        except Exception as e:
            st.error(f"An error occurred: {e}")


elif Operation_option == "Stock Returns Correlation":
    st.header("Stock Returns Correlation")

    # Input for stock tickers and date range
    ticker1 = st.text_input("Enter first stock ticker (e.g., AAPL, MSFT):", "AAPL")
    ticker2 = st.text_input("Enter second stock ticker (e.g., MSFT, GOOGL):", "MSFT")
    start_date = st.date_input("Start date", pd.to_datetime('2017-09-21'))
    end_date = st.date_input("End date", pd.to_datetime('2024-09-21'))

    if st.button("Calculate Correlation"):
        try:
            # Function to fetch stock data
            def fetch_stock_data(tickers, start_date, end_date):
                data = yf.download(tickers, start=start_date, end=end_date)
                adj_close = data['Adj Close']
                returns = adj_close.pct_change().dropna()
                return returns

            # Fetch data and calculate correlation
            tickers = [ticker1, ticker2]
            returns = fetch_stock_data(tickers, start_date, end_date)
            correlation_matrix = returns.corr()
            correlation_coefficient = correlation_matrix.loc[tickers[0], tickers[1]]

            # Plot the correlation graph
            plt.figure(figsize=(10, 6))
            plt.scatter(returns[tickers[0]], returns[tickers[1]], alpha=0.5, color='purple', label=f'{tickers[0]} Returns')
            plt.scatter(returns[tickers[1]], returns[tickers[0]], alpha=0.5, color='orange', label=f'{tickers[1]} Returns')
            plt.title(f'Daily Returns of {tickers[0]} vs {tickers[1]}')
            plt.xlabel(f'{tickers[0]} Daily Returns')
            plt.ylabel(f'{tickers[1]} Daily Returns')
            plt.axhline(0, color='grey', lw=0.8)
            plt.axvline(0, color='grey', lw=0.8)
            plt.grid()
            plt.legend()
            st.pyplot(plt)

            # Function to classify correlation strength
            def correlation_strength(corr):
                if corr < 0:
                    correlation_type = 'Negative. Only buy the one you have more interest in, together they are a weak investment.'
                    if -0.2 <= corr > -0.19:
                        strength = 'Very weak negative. Only buy the one you have more interest in.'
                    elif -0.4 <= corr < -0.2:
                        strength = 'Weak negative. Buying one and selling the other would lead to a low Beta portfolio.'
                    elif -0.6 <= corr < -0.4:
                        strength = 'Moderate negative. Buying one and selling the other would lead to a very low Beta portfolio.'
                    elif -0.8 <= corr < -0.6:
                        strength = 'Strong negative. Consider buying one and shorting the other under the right conditions.'
                    elif -1 <= corr < -0.8:
                        strength = 'Very strong negative. Consider buying one and shorting the other under the right conditions.'
                else:
                    correlation_type = 'Positive'
                    if 0 <= corr < 0.2:
                        strength = 'Very weak. Only buy the one you have more interest in.'
                    elif 0.2 <= corr < 0.4:
                        strength = 'Weak. Buying both could reduce Beta slightly.'
                    elif 0.4 <= corr < 0.6:
                        strength = 'Moderate. Buying both could help diversify without hurting positive returns too much.'
                    elif 0.6 <= corr < 0.8:
                        strength = 'Strong. Buying both could diversify systematic risk.'
                    elif 0.8 <= corr <= 1:
                        strength = 'Very strong. Buying both could diversify systematic risk significantly.'
                    else:
                        strength = 'Undefined'
                
                return correlation_type, strength

            # Display correlation results
            correlation_type, strength = correlation_strength(correlation_coefficient)
            st.write(f'Correlation Coefficient between {tickers[0]} and {tickers[1]}: {correlation_coefficient:.4f}')
            st.write(f'The correlation is {correlation_type} and the strength is: {strength}')

        except Exception as e:
            st.error(f"An error occurred: {e}")

elif Operation_option == "Autocorrelation":
    st.header("Autocorrelation Analysis")

    ticker = st.text_input("Enter Stock Ticker (e.g., CAT):", "CAT")
    
    if st.button("Run Autocorrelation Analysis"):
        try:
            # API setup and data retrieval
            api_key = 'lUQ6BgfysRkuoluX7TNHklSVB7XXje9R'
            client = RESTClient(api_key)

            # Get the current date and subtract one day to get the previous date
            end_date = datetime.now().date()  # Current date
            start_date = end_date - timedelta(days=1)  # Previous date

            # Convert dates to strings in the format 'YYYY-MM-DD'
            #start_date_str = start_date.strftime('%Y-%m-%d')
            #end_date_str = end_date.strftime('%Y-%m-%d')
            start_date_str = start_date.strftime('2024-09-27')
            end_date_str = end_date.strftime('2024-09-28')

            # Fetch the data
            aggs = cast(
                HTTPResponse,
                client.get_aggs(
                    ticker,  
                    1,
                    'minute',
                    start_date_str,
                    end_date_str,
                    raw=True
                ),
            )

            poly_data = json.loads(aggs.data)
            poly_data = poly_data['results']

            # Check the length of the data to ensure full period coverage
            st.write(f"Number of data points fetched: {len(poly_data)}")

            # Prepare the data for DataFrame
            dates = []
            open_prices = []
            high_prices = []
            low_prices = []
            close_prices = []

            for bar in poly_data:
                dates.append(pd.Timestamp(bar['t'], tz='GMT', unit='ms'))
                open_prices.append(bar['o'])
                high_prices.append(bar['h'])
                low_prices.append(bar['l'])
                close_prices.append(bar['c'])

            data = {
                'Open': open_prices,
                'High': high_prices,
                'Low': low_prices,
                'Close': close_prices,
            }

            dataFrame = pd.DataFrame(data, index=dates)

            # Calculate returns
            dataFrame['Returns'] = dataFrame['Close'].pct_change().dropna()

            # Prepare for autocorrelation calculation for multiple lags
            max_lags = 100
            returns = dataFrame['Returns'].dropna()
            autocorr_values = [returns.autocorr(lag=i) for i in range(1, max_lags + 1)]

            # Calculate the confidence intervals for significance
            confidence_level = 0.05
            z_score = 1.96  # For 95% confidence interval
            confidence_band = z_score / (len(returns) ** 0.5)

            # Plotting the autocorrelation
            plt.figure(figsize=(10, 6))
            plt.bar(range(1, max_lags + 1), autocorr_values, color='skyblue', label='Autocorrelation')
            plt.axhline(y=confidence_band, color='red', linestyle='--', label='Upper Confidence Band (5%)')
            plt.axhline(y=-confidence_band, color='red', linestyle='--', label='Lower Confidence Band (5%)')
            plt.title(f'Autocorrelation of Returns for {ticker}')
            plt.xlabel('Lag')
            plt.ylabel('Autocorrelation')
            plt.legend()
            plt.grid(True)
            st.pyplot(plt)

        except Exception as e:
            st.error(f"An error occurred: {e}")


elif Operation_option == "Linear Regression":
    st.header("Linear Regression Analysis")

    ticker = st.text_input("Enter Stock Ticker (e.g., CAT):", "CAT")
    
    if st.button("Run Linear Regression Analysis"):
        try:
            # API setup and data retrieval
            api_key = 'lUQ6BgfysRkuoluX7TNHklSVB7XXje9R'
            client = RESTClient(api_key)

            # Get the current date and subtract one day to get the previous date
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=1)

            # Convert dates to strings in the format 'YYYY-MM-DD'
            #start_date_str = start_date.strftime('%Y-%m-%d')
            #end_date_str = end_date.strftime('%Y-%m-%d')
            start_date_str = start_date.strftime('2024-09-27')
            end_date_str = end_date.strftime('2024-09-28')

            # Fetch the data
            aggs = cast(
                HTTPResponse,
                client.get_aggs(
                    ticker,
                    1,
                    'minute',
                    start_date_str,
                    end_date_str,
                    raw=True
                ),
            )

            poly_data = json.loads(aggs.data)
            poly_data = poly_data['results']

            # Prepare the data for DataFrame
            dates = []
            open_prices = []
            high_prices = []
            low_prices = []
            close_prices = []
            volumes = []

            for bar in poly_data:
                dates.append(pd.Timestamp(bar['t'], tz='GMT', unit='ms'))
                open_prices.append(bar['o'])
                high_prices.append(bar['h'])
                low_prices.append(bar['l'])
                close_prices.append(bar['c'])
                volumes.append(bar['v'])

            data = {
                'Open': open_prices,
                'High': high_prices,
                'Low': low_prices,
                'Close': close_prices,
                'Volume': volumes
            }

            dataFrame = pd.DataFrame(data, index=dates)
            dataFrame['Returns'] = dataFrame['Close'].pct_change()

            # Drop any NaN values that might arise from pct_change
            dataFrame.dropna(inplace=True)

            # Filter to only include data between 14:30 and 20:59
            dataFrame = dataFrame[(dataFrame.index.time >= datetime.strptime('14:30', '%H:%M').time()) & 
                                  (dataFrame.index.time <= datetime.strptime('20:59', '%H:%M').time())]

            # Calculate volatility as the rolling standard deviation of returns
            dataFrame['Volatility'] = dataFrame['Returns'].rolling(window=5).std()

            # Drop NaN values generated by rolling window
            dataFrame.dropna(inplace=True)

            # Plotting in 3D with volume instead of variance
            fig = plt.figure(figsize=(12, 8))
            ax = fig.add_subplot(111, projection='3d')

            # Scatter plot for each variable with correct colors
            ax.scatter(dataFrame['Volatility'], dataFrame['Returns'], dataFrame['Volume'], 
                       c='blue', label='Volatility', alpha=0.5)
            ax.scatter(dataFrame['Returns'], dataFrame['Returns'], dataFrame['Volume'], 
                       c='orange', label='Returns', alpha=0.5)
            ax.scatter(dataFrame['Volatility'], dataFrame['Volume'], dataFrame['Volume'], 
                       c='green', label='Volume', alpha=0.5)

            # Labels
            ax.set_xlabel('Volatility')
            ax.set_ylabel('Returns')
            ax.set_zlabel('Volume')
            ax.set_title(f'3D Plot of Returns, Volatility, and Volume for {ticker}')

            # Fit a plane to the data
            X = dataFrame[['Volatility', 'Volume']]
            y = dataFrame['Returns']

            # Adding a constant for statsmodels
            X = sm.add_constant(X)

            # Fit the model using statsmodels to get p-value and R-squared
            model = sm.OLS(y, X).fit()

            # Predictions for the plane
            x_range = np.linspace(dataFrame['Volatility'].min(), dataFrame['Volatility'].max(), 10)
            z_range = np.linspace(dataFrame['Volume'].min(), dataFrame['Volume'].max(), 10)
            x_mesh, z_mesh = np.meshgrid(x_range, z_range)
            y_plane = model.params[0] + model.params[1] * x_mesh + model.params[2] * z_mesh

            ax.plot_surface(x_mesh, y_plane, z_mesh, color='red', alpha=0.5)

            # Display the chart
            st.pyplot(fig)

            # Display R-squared value
            r_squared = model.rsquared
            st.write(f"R-squared: {r_squared:.4f}")
            st.write("You want this ^ to be between 0.1 and 0.5, anything above 0.5 indicates overfitting.")
            st.write("")

            # Display p-value of the model
            p_value = model.f_pvalue
            st.write(f"P-value: {p_value:.4f}")
            st.write("You want this ^ to be less than 0.05 indicating there is less than a 5% chance that the observed result is due to chance (This is the most important value).")
            st.write("")

            st.write("Blue = Volatility")
            st.write("Green = Volume")
            st.write("Orange = Returns")

        except Exception as e:
            st.error(f"An error occurred: {e}")
